``simpleaf workflow`` command
=============================

The ``simpleaf workflow`` command is designed to run potentially complex single-cell data processing workflows using a simpleaf workflow configuration Jsonnet program.
Any valid JSON file is also a valid Jsonnet program.

``simpleaf workflow`` exposes two required flags: 

* ``--config-file`` takes the path to a simpleaf workflow configuration Jsonnet program. For workflows published to the [protocol estuary GitHub repository](https://github.com/COMBINE-lab/protocol-estuary), one can call the ``get workflow config`` command to fetch their workflow configuration files. 
* ``--output`` takes the path to the output directory for writing the log files, and, if programmed in a specific configuration Jsonnet program, the results generated by invoked workflow commands.

When executing, ``simpleaf workflow`` will first parse the given workflow configuration Jsonnet program into a workflow description in JSON format. Whereas the workflow configuration Jsonnet program provides a "template" for the workflow and functions to handle features like basic logic, the resulting workflow description is a simple imperative description of the commands to be executed. To provide the greatest flexibility, the only requirement we set for the workflow configuration Jsonnet program is that in the workflow description its results, the fields representing a command record, either a simpleaf or an external shell command, follow the format described in section `The procedure of parsing the configuration program`_. 

Then, ``simpleaf workflow`` will traverse the workflow description to parse the simpleaf and external shell command records and put them into an execution queue, ordered by their ``Step`` number. Note that any command with a negative ``Step`` number is always ignored (neither parsed nor invoked) by ``simpleaf workflow``.

``simpleaf workflow`` also exposes multiple flags for controlling the execution flow when invoking the commands. If none of the flags is set, ``simpleaf workflow`` will invoke all commands in the execution queue. 

* If setting the ``--no-execution`` flag, ``simpleaf workflow`` will write the log files and return without invoking any command.
* If setting the ``--start-at`` flag with an ``Step`` number, ``simpleaf workflow`` will begin the invocation from the commands indicated by that specific ``Step`` in the execution queue.
* If setting the ``--resume`` flag, ``simpleaf workflow`` will find the log file of a previous ``simpleaf workflow`` run in the provided output folder to decide which ``Step`` to begin with.
* If setting the ``--skip-step`` flag with a set of comma-separated ``Step`` numbers, ``simpleaf workflow`` will ignore the commands whose ``Step`` is in those numbers in the execution queue. 

Workflow Output
^^^^^^^^^^^^^^^

``simpleaf workflow`` writes two log files to the output directory passed to ``--output``:

* ``simpleaf_workflow_log.json``: This file records the meta and logging information of the ``simpleaf workflow`` call. For example, the runtime of each executed command and the ``Step`` of the start and terminating command. This file has to be in the directory passed to ``--output`` if ``--resume`` is set.
* ``workflow_execution_log.json``: This file is a modified version of the workflow description JSON discussed above. The only modification is that in this file, the ``Step`` of the successfully invoked commands (return code 0) becomes the negative of their original value.  

The results generated by the invoked commands might or might not be exported to the output directory, as the output directory of each invoked command is defined in the workflow configuration Jsonnet program passed to ``--config-file``, rather than by ``simpleaf workflow``.

Full Usage
^^^^^^^^^^

The relevant options (which you can obtain by running ``simpleaf workflow -h``) are:

.. code-block:: console

    parse the input configuration/workflow files and execute the corresponding workflow(s)

    Usage: simpleaf workflow [OPTIONS] --config-path <CONFIG_PATH> --output <OUTPUT>

    Options:
    -c, --config-path <CONFIG_PATH>  path to a simpleaf workflow configuration file
    -o, --output <OUTPUT>            output directory for log files and the workflow outputs that have no explicit output
                                    directory
    -l, --lib-paths <LIB_PATHS> comma-separated library search paths when processing the (custom) workflow configuration
                                    file. (right-most wins)
    -h, --help                       Print help
    -V, --version                    Print version

    Control Flow:
    -n, --no-execution           return after parsing the workflow config file without executing the commands
    -s, --start-at <START_AT>    Start the execution from a specific Step. All previous steps will be ignored [default: 1]
    -r, --resume                 resume execution from the termination step of a previous run. To use this flag, the output
                                directory must contain the JSON file generated from a previous run
        --skip-step <SKIP_STEP> comma-separated integers indicating which steps (commands) will be skipped during the
                                execution


The procedure of parsing the configuration program
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

In ``simpleaf workflow``, we use the `Jrsonnet <https://github.com/CertainLach/jrsonnet>`_ rust library to parse the workflow configuration Jsonnet program passed to ``--config-file`` (or ``-c``). Any valid `Jsonnet <https://jsonnet.org/>`_  program and JSON file is a valid input for ``simpleaf workflow`` (but might not be a valid simpleaf workflow.). When calling Jrsonnet, ``simpleaf workflow`` passes the following arguments in addition to the provided configuration Jsonnet program. This also means that any custom configuration program can access the ``output`` and ``utils``variables  in the Jsonnet program using ``std.extVar("output")`` and ``std.extVar("utils")``.

1) The output directory passed to ``--output`` as the external variable ``output``.
2) The workflow utility library from the protocol estuary as the external variable ``utils``.
3) The path to the ``utils`` folder in the protocol estuary in ``ALEVIN_FRY_HOME`` as an additional library search directory.
4) The path to the parent directory of the file passed to ``--config-file`` as an additional library search directory.
5) The paths passed to the ``--lib-path`` flag, if any, as additional library search directories.

Valid simpleaf workflow description format
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Although any Jsonnet program or JSON file is a valid input for ``simpleaf workflow``, it doesn't means they all can be converted to a valid simpleaf workflow description JSON. To provide the greatest flexibility, we only set the requirements for the fields representing a command record, either a simpleaf command or an external command, in the simpleaf workflow description JSON file (not the configuration program). 

* To ease the later parsing process, the values of all command arguments must be provided as strings, i.e., wrapped by quotes (``"value"``), even for integers like the number of threads (for example, ``{“--threads”: "16"}`` for simpleaf commands).
* A command record field must contain a ``Step`` and a ``Program Name`` sub-field, where the ``Step`` field represents which step, **using an integer**, this command constitutes in the workflow. This is the only integer field being parsed in the workflow description. The ``Program Name`` field represents a valid program in the user's execution environment. For example, the correct ``Program Name`` for ``simpleaf index`` is ``"simpleaf index"`` and for ``simpleaf quant`` is ``"simpleaf quant"``. For an external command such as ``awk``, if its binary is in the user's ``PATH`` environmental variable, it can just be ``"awk"``; if not, it must contain a valid path to its binary, for example, ``"/usr/bin/awk"``.
* If a field records a simpleaf command, the name of its sub-fields, except ``Step`` and ``Program Name``, must be valid simpleaf flags (for example, options like ``--fasta``, or ``-f`` for short, for ``simpleaf index`` and ``--unfiltered-pl`` (or ``-u``) for ``simpleaf quant``). Those option names (sub-field names), together with their values, if any, will be used to call the corresponding simpleaf program. Sub-fields not named by a valid simpleaf flag will trigger an error.
* If a field records an external shell command, it must contain a valid ``Step`` and ``Program Name`` sub-field as described above. In contrast to simpleaf command records, all arguments of an external shell command must be provided in an array, in order, with the name ``"Argument"``. ``Simpleaf workflow`` will parse the entries in the array to build the actual command in order. For example, to tell ``simpleaf workflow`` to invoke the shell command  ``ls -l -h .`` at step 7, one needs to use the following JSON record:

  .. code-block:: console

    {
        "Step": 7,
        "Program Name": "ls",
        "Arguments": ["-l", "-h", "."]
    }

